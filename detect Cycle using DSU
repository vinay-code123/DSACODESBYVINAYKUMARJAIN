int find(int x, int par[]){
    if(x == par[x]) return x;
    par[x] = find(par[x], par);
    return par[x];
}

bool unionCycle(int a, int b, int par[], int rank[]){
    int ax = find(a, par);
    int bx = find(b, par);
    
    if(ax==bx && a!=b) return true;
    
    if(ax <  bx) par[ax] = bx;
    else if(ax >  bx) par[bx] = ax;
    else {par[bx] = ax; rank[ax]++;}
    
    return false;
}
int detectCycle(int n, vector<int>adj[])
	{
	    // Code here
	    int rank[n];
    int par[n];
    
    for(int v=0; v<n; v++){
        par[v] = v;
        rank[v] = 0;
    }
    
    for(int v=0; v<n; v++)
        for(auto u : adj[v])
            if(v < u && unionCycle(u, v, par, rank) == true)
                return 1;
    return 0;
	}
};
