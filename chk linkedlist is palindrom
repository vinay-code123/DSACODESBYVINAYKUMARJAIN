class Solution{
 public:
   Node* getMiddle(Node* head){
       Node* fast = head;
       Node* slow = head;
       
       while(fast && fast->next){
           fast = fast->next->next;
           if(fast == NULL){
               return slow;
           }
           slow = slow->next;
       }
       return slow;
   }
   
   Node* Reverse(Node* head){
       Node* curr = head;
       Node* prev = NULL;
       Node* next = NULL;
       
       while(curr!=NULL){
           next = curr->next;
           curr->next = prev;
           prev = curr;
           curr = next;
       }
       return prev;
   }
   
   
   //Function to check whether the list is palindrome.
   bool isPalindrome(Node *head)
   {
       if(head == NULL || head->next == NULL) 
       return 1;
       
       //Step-1: find middle
       Node* middle = getMiddle(head);
       
       //step-2: Reverse linked list after middle
       Node* temp = middle->next;
       middle->next = Reverse(temp);
       
       //step-3: Compare both the halves
       Node* head1 = head;
       Node* head2 = middle->next;
       
       while(head2!=NULL){
           if(head1->data!=head2->data){
               return 0;
           }
           head1 = head1->next;
           head2 = head2->next;
       }
       return 1;
       
   }
};
